#include "as7331.h"
#include "SerialCompatibility.h"

FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
FSP_CPP_FOOTER

// Specify sensor parameters //
MMODE   mmode = AS7331_CONT_MODE;  // choices are modes are CONT, CMD, SYNS, SYND
CCLK    cclk  = AS7331_1024;      // choices are 1.024, 2.048, 4.096, or 8.192 MHz
uint8_t sb    = 0x01;             // standby enabled 0x01 (to save power), standby disabled 0x00
uint8_t breakTime = 40;           // sample timeMs == 8 us x breaktimeMs (0 - 255, or 0 - 2040 us range), CONT or SYNX modes

uint8_t gain = 8; // ADCGain = 2^(11-gain), by 2s, 1 - 2048 range,  0 < gain = 11 max, default 10
uint8_t timeMs = 9; // 2^time in ms, so 0x07 is 2^6 = 64 ms, 0 < time = 15 max, default  6

// sensitivities at 1.024 MHz clock
float lsbA = 304.69f / ((float)(1 << (11 - gain))) / ((float)(1 << timeMs)/1024.0f) / 1000.0f;  // uW/cm^2
float lsbB = 398.44f / ((float)(1 << (11 - gain))) / ((float)(1 << timeMs)/1024.0f) / 1000.0f;
float lsbC = 191.41f / ((float)(1 << (11 - gain))) / ((float)(1 << timeMs)/1024.0f) / 1000.0f;

uint16_t tempData= 0, UVAData = 0, UVBData = 0, UVCData = 0, allData[4] = {0, 0, 0, 0};
float temp_C = 0;
int status;

I2Cdev i2c_0;
AS7331 AS7331(&i2c_0);

/*******************************************************************************************************************//**
 * main() is generated by the RZA3UL Configuration editor and is used to generate threads if an RTOS is used.
 * This function is called by main() when no RTOS is used.
 **********************************************************************************************************************/
void hal_entry(void)
{
    Serial.begin(115200);

    AS7331.powerUp();
    AS7331.reset();
    uint8_t AS7331_ID = AS7331.getChipID();
    //Serial.print((uint8_t*)"ID: "); Serial.println(AS7331_ID);

    // check if AS7331 has acknowledged
    if(AS7331_ID == 0x21)  {
        AS7331.setConfigurationMode();
        AS7331.init(mmode, cclk, sb, breakTime, gain, timeMs);
        delay(100); // let sensor settle
        AS7331.setMeasurementMode();
    }
    else {
        Serial.print((uint8_t*)"Wrong id: "); Serial.println(AS7331_ID);
    }

    while (true) {
        status = AS7331.getStatus();
        //Serial.print((uint8_t*)"Current status: "); Serial.println(status);

        if (status & 0x0008) {
            AS7331.readAllData(allData); // burst read data in one I2C transaction takes 281 us
            tempData = allData[0];
            UVAData  = allData[1];
            UVBData  = allData[2];
            UVCData  = allData[3];

            Serial.println((uint8_t*)"Raw counts");
            Serial.print((uint8_t*)"AS7331 UVA = "); Serial.println(UVAData);
            Serial.print((uint8_t*)"AS7331 UVB = "); Serial.println(UVBData);
            Serial.print((uint8_t*)"AS7331 UVC = "); Serial.println(UVCData); Serial.print((uint8_t*)"\n");

            Serial.println((uint8_t*)"Scaled UV data");
            Serial.print((uint8_t*)"AS7331 UVA (uW/cm^2)= "); Serial.print((int)((float)(UVAData)*lsbA));
            Serial.print((uint8_t*)"."); Serial.println((int)((float)(UVAData) * lsbA * 100 ) % 100);
            Serial.print((uint8_t*)"AS7331 UVB (uW/cm^2)= "); Serial.print((int)((float)(UVBData)*lsbB));
            Serial.print((uint8_t*)"."); Serial.println((int)((float)(UVBData) * lsbB * 100 ) % 100);
            Serial.print((uint8_t*)"AS7331 UVC (uW/cm^2)= "); Serial.print((int)((float)(UVCData)*lsbC));
            Serial.print((uint8_t*)"."); Serial.println((int)((float)(UVCData) * lsbC * 100 ) % 100);

            temp_C = tempData * 0.05f - 66.9f;
            Serial.print((uint8_t*)"AS7331 Temperature = "); Serial.print((int)temp_C);
            Serial.print((uint8_t*)"."); Serial.print((int)((float)(temp_C) * 100)  % 100); Serial.print((uint8_t*)" C\n\n");
        }
        delay(1000);
    }
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
        /* Initialize MMU. */
        R_MMU_Open (&g_mmu_ctrl, &g_mmu_cfg);
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup. */

        /* Configure pins. */
        R_IOPORT_Open (&g_ioport_ctrl, &g_bsp_pin_cfg);
    }
}
