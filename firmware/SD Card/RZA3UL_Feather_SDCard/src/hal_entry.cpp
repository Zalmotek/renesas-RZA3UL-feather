#include "hal_data.h"
#include "SerialCompatibility.h"
#include "common_utils.h"

#define RM_FREERTOS_PLUS_FAT_EXAMPLE_FILE_NAME            "TEST_FILE.txt"
#define RM_FREERTOS_PLUS_FAT_EXAMPLE_BUFFER_SIZE_BYTES    (10240)
#define RM_FREERTOS_PLUS_FAT_EXAMPLE_PARTITION_NUMBER     (0)
extern rm_freertos_plus_fat_instance_ctrl_t g_rm_freertos_plus_fat_ctrl;
extern const rm_freertos_plus_fat_cfg_t     g_rm_freertos_plus_fat_cfg;
extern rm_freertos_plus_fat_disk_cfg_t      g_rm_freertos_plus_fat_disk_cfg;
uint8_t g_file_data[] = "meow :3";
uint8_t g_read_buffer[RM_FREERTOS_PLUS_FAT_EXAMPLE_BUFFER_SIZE_BYTES];


FSP_CPP_HEADER
void R_BSP_WarmStart(bsp_warm_start_event_t event);
FSP_CPP_FOOTER

/*******************************************************************************************************************//**
 * main() is generated by the RZA3UL Configuration editor and is used to generate threads if an RTOS is used.
 * This function is called by main() when no RTOS is used.
 **********************************************************************************************************************/
void hal_entry(void)
{
    Serial.begin(115200);
    Serial.print((uint8_t*)"Hello\n");

    /* Open media driver.*/
       fsp_err_t err = RM_FREERTOS_PLUS_FAT_Open(&g_rm_freertos_plus_fat_ctrl, &g_rm_freertos_plus_fat_cfg);
       /* Handle any errors. This function should be defined by the user. */
       Serial.print((uint8_t*)"RM_FREERTOS_PLUS_FAT_Open\n");
       assert(FSP_SUCCESS == err);
       /* Initialize the media and the disk. If the media is removable, it must be inserted before calling
        * RM_FREERTOS_PLUS_FAT_MediaInit. */
       err = RM_FREERTOS_PLUS_FAT_MediaInit(&g_rm_freertos_plus_fat_ctrl, &g_rm_freertos_plus_fat_disk_cfg.device);
       Serial.print((uint8_t*)"RM_FREERTOS_PLUS_FAT_MediaInit\n");
       assert(FSP_SUCCESS == err);
       /* Initialize one disk for each partition used in the application. */
       FF_Disk_t disk;
       err = RM_FREERTOS_PLUS_FAT_DiskInit(&g_rm_freertos_plus_fat_ctrl, &g_rm_freertos_plus_fat_disk_cfg, &disk);
       Serial.print((uint8_t*)"RM_FREERTOS_PLUS_FAT_DiskInit\n");
       assert(FSP_SUCCESS == err);
       /* Mount each disk.  This assumes the disk is already partitioned and formatted. */
       FF_Error_t ff_err = FF_Mount(&disk, RM_FREERTOS_PLUS_FAT_EXAMPLE_PARTITION_NUMBER);
       //handle_ff_error(ff_err);
       /* Add the disk to the file system. */
       FF_FS_Add("/", &disk);
       /* Open a source file for writing. */
       FF_FILE * pxSourceFile = ff_fopen((const char *) RM_FREERTOS_PLUS_FAT_EXAMPLE_FILE_NAME, "w");
       Serial.print((uint8_t*)"ff_fopen\n");
       assert(NULL != pxSourceFile);
       /* Write file data. */
       size_t size_return = ff_fwrite(g_file_data, sizeof(g_file_data), 1, pxSourceFile);
       Serial.print((uint8_t*)"ff_fwrite\n");
       assert(1 == size_return);
       /* Close the file. */
       int close_err = ff_fclose(pxSourceFile);
       Serial.print((uint8_t*)"ff_fclose\n");
       assert(0 == close_err);
       /* Open the source file in read mode. */
       pxSourceFile = ff_fopen((const char *) RM_FREERTOS_PLUS_FAT_EXAMPLE_FILE_NAME, "r");
       Serial.print((uint8_t*)"ff_fopen\n");
       assert(NULL != pxSourceFile);
       /* Read file data. */
       size_return = ff_fread(g_read_buffer, sizeof(g_file_data), 1, pxSourceFile);
       Serial.print((uint8_t*)"ff_fread\n");
       assert(1 == size_return);
       /* Close the file. */
       close_err = ff_fclose(pxSourceFile);
       Serial.print((uint8_t*)"ff_fclose\n");
       assert(0 == close_err);
       /* Verify the file data read matches the file written. */
       assert(0U == memcmp(g_file_data, g_read_buffer, sizeof(g_file_data)));
       Serial.print((uint8_t*)"done\n");
}

/*******************************************************************************************************************//**
 * This function is called at various points during the startup process.  This implementation uses the event that is
 * called right before main() to set up the pins.
 *
 * @param[in]  event    Where at in the start up process the code is currently at
 **********************************************************************************************************************/
void R_BSP_WarmStart(bsp_warm_start_event_t event)
{
    if (BSP_WARM_START_RESET == event)
    {
        /* Initialize MMU. */
        R_MMU_Open (&g_mmu_ctrl, &g_mmu_cfg);
    }

    if (BSP_WARM_START_POST_C == event)
    {
        /* C runtime environment and system clocks are setup. */

        /* Configure pins. */
        R_IOPORT_Open (&g_ioport_ctrl, &g_bsp_pin_cfg);
    }
}
